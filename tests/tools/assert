#!/bin/sh

# Realiza um teste de string. Caso o valor a ser testado foi o mesmo que o
# esperado, retorna 0. Caso contrário retorna 1.
__assert_equals_string() {
  # $1: Valor esperado.
  # $2: Valor a ser testado.

  [ "$1" = "$2" ]
  local exit_status=$?

  [ $exit_status -eq 0 ] &&
    message "Success!" LIGHTGREEN ||
    message "Fail: string expected: [$1] but was: [$2]" LIGHTRED

  return $exit_status
}

# Realiza um teste de string. Se os valores forem diferentes, retorna 0. Caso
# contrário retorna 1.
__assert_not_equals_string() {
  # $1: Primeiro valor a ser comparado.
  # $2: Segundo valor a ser comparado.

  [ "$1" != "$2" ]
  local exit_status=$?

  [ $exit_status -eq 0 ] &&
    message "Success!" LIGHTGREEN ||
    message "Fail: values should be different. Actual: [$1]" LIGHTRED

  return $exit_status
}

# Realiza um teste numérico. Caso o valor a ser testado foi o mesmo que o
# esperado, retorna 0. Caso contrário retorna 1. Se os valores informados não
# forem numéricos, retorna 2.
__assert_equals_numeric() {
  # $1: Valor esperado.
  # $2: Valor a ser testado.

  [ $1 -eq $2 ] 2>/dev/null
  local exit_status=$?

  [ $exit_status -eq 0 ] &&
    message "Success!" LIGHTGREEN ||
    message "Fail: numeric expected: [$1] but was: [$2]" LIGHTRED

  return $exit_status
}

# Executa a função ou comando passado e realiza um teste de exit status. Se o
# exit status foi o mesmo que o esperado, retorna 0. Caso contrário retorna 1.
# Se o exit status esperado informado não for numérico, retorna 2.
__assert_equals_exit_status() {
  # $1: Exit status esperado do retorna da função ou comando a ser testado.
  # $2: Função ou comando a ser testado.

  local expected=$1; shift

  # Executa a função ou comando ignorando stdout e stderr.
  eval $@ >/dev/null 2>&1

  local real=$?
  [ $expected -eq $real ] 2>/dev/null
  local exit_status=$?

  [ $exit_status -eq 0 ] &&
    message "Success!" LIGHTGREEN ||
    message "Fail: exit status expected: [$expected] but was: [$real]" LIGHTRED

  return $exit_status
}

# TODO
#__assert_not_equals_numeric() {}
#__assert_not_equals_exit_status() {}
# deve funcionar com set -e
