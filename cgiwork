#!/bin/bash

#######################################################################
#                                                                     #
#                               CGIWork                               #
#                                                                     #
#  Description: Replace shell variables into an output file, keeping  #
#               your output files and shell scripts separated.        #
#                                                                     #
#  Usage: cgiwork "${ARRAY[@]}"                                       #
#                                                                     #
#  Important: The output file must be the first element of the array  #
#  Example of array: ARRAY=("templates/example.html");                #
#                    ARRAY+=("variable1=value1");                     #
#                    ARRAY+=("variable2=value2");                     #
#                                                                     #
#  Author: LBezerril                                                  #
#  To see the documentation, visit: github.com/LBezerril/CGIWork      #
#                                                                     #
#                                                                     #
#######################################################################

ARRAY=( "$@" );
PROPERTIES="${ARRAY[0]}" && unset ARRAY[0];
EXPECTED_VALUES="plain|json|xml";
PATH=$PATH:/opt/cgiwork/scripts
MESSAGE_ERROR="CGIWork Error:";

function get_property() {
	# $1: property name
	echo "$PROPERTIES" | grep -Eo "$1=(.*);" | sed "s/$1=//g;s/;.*//g";
}

function is_expected_value() {
	# $1: value
	# $2: expected values separated by "|"
	echo "$1" | grep -Eq "^($2)$";
}

function var_is_empty() {
	# $1: variable;
	if [[ "$1" != "" ]]; then	return 1; fi;
}

function is_running_interactivelly() {
	if ! [ -t 0 ]; then return 1; fi;
}

function read_from_stdin() {
	while read line; do
		echo "$line";
	done;
}

function fail_if_file_is_invalid() {
	# $1: file;
	if [[ ! -f "$1" ]]; then
		echo "$MESSAGE_ERROR Output file does not exist!";
		exit 1;
	elif [[ ! -r "$1" ]]; then
		echo "$MESSAGE_ERROR Output file is not readable!";
		exit 1;
	fi;
}

TYPE="$(get_property type)";

if ! is_expected_value $TYPE $EXPECTED_VALUES; then
	echo "$MESSAGE_ERROR Invalid type!";
	exit 1;
fi;

. cgiwork_$TYPE;
