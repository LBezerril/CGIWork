#!/bin/sh

# Retorna o método utilizado na requisição.
_get_method() {
  # Caso não encontrado, retorna exit status 1.
  [ -z "$REQUEST_METHOD" ] && return 1 || echo "$REQUEST_METHOD"
}

# Retorna o URI utilizado na requisição.
_get_uri() {
  # Caso não encontrado, retorna exit status 1.
  [ -z "$REQUEST_URI" ] && return 1 || echo "$REQUEST_URI"
}

# Retorna o protocolo utilizado na requisição.
_get_protocol() {
  # Caso não encontrado, retorna exit status 1.
  [ -z "$SERVER_PROTOCOL" ] && return 1 || echo "$SERVER_PROTOCOL"
}

# Retorna o valor do parâmetro passado. Se nehum parâmetro for passado, retorna
# todos no formato key=value, um em cada linha.
_get_parameters() {
  # $1: Nome do parâmetro a ser buscado (opcional).

  # Caso não encontrado, retorna exit status 1.
  [ -z "$QUERY_STRING" ] && return 1

  echo "$QUERY_STRING" | tr '&+' '\n ' |
    (
      [ -z "$1" ] &&

      # Caso nenhum parâmetro for passado, retorna o stdout da pipe.
      # Como alternativa, pode-se usar "cat -" ao invés do laço while com read.
      while read parameter; do
        echo "$parameter"
      done ||

      # Caso o parâmetro for passado, procura o valor dele.
      (
        while read parameter; do
          # ${parameter%%=*} : key - ${parameter#*=} : value.
          [ "$1" = "${parameter%%=*}" ] && echo "${parameter#*=}" && return 0
        done

        # Caso o parâmetro passado não foi encontrado, retorna exit status 1.
        return 1
      )
    )
}

# Retorna o valor do header passado. Se nehum header for passado, retorna todos
# no formato "Key: value", um em cada linha.
_get_headers() {
  # $1: Nome do header a ser buscado (opcional).

  # Função interna que decide se e como imprimir determinado valor de header.
  __print_header() {
    # $1: Header key.
    # $2: Header value.
    # $3: Header key a ser buscado (opcional).

    # Se o header key a ser buscado não foi passado, imprime o par de header
    # "Key: value".
    if [ -z "$3" ]; then
      echo "$1: $2"
    else
      # Redefine os parâmetros posicionais do shell trocando os nomes de header
      # ($1 e $2) para minúsculo a fim de compará-los sem maiores problemas.
      set -- \
        "$(echo "$1" | tr '[:upper:]' '[:lower:]')" \
        "$2" \
        "$(echo "$3" | tr '[:upper:]' '[:lower:]')"

      # Se o header key a ser buscado for encontrado, imprime o valor dele.
      if [ "$3" = "$1" ]; then
        echo "$2"
        # O único fluxo que esta função retorna um non-zero exit status, é
        # quando o header key a ser buscado foi encontrado.
        return
      fi
    fi

    return 1
  }

  # Para shells posix, pode-se usar o builtin "set". Para shells non-posix - a
  # menos que "set -o posix" for especificado - não é recomendado, visto que as
  # funções e o conteúdo delas também são imprimidos. Ao usar set, vale lembrar
  # que mesmo shell variables são imprimidas. Outra opção é usar o "env".
  printenv | while read header; do
    case "$header" in

      CONTENT_TYPE=?*)
      # ${header#*=} : value.
      __print_header "Content-Type" "${header#*=}" "$1" && return 1;;

      CONTENT_LENGTH=?*)
      # ${header#*=} : value.
      __print_header "Content-Length" "${header#*=}" "$1" && return 1;;

      HTTP_?*=?*)
        local header_key="${header%%=*}" # Remove tudo do '=' para a direita.
        header_key="${header_key#HTTP_}" # Remove o início 'HTTP_'.
        header_key="$(echo "$header_key" | tr '[:upper:]_' '[:lower:]-')"
        # TODO: Camel-Case

        # ${header#*=} : value.
        __print_header "$header_key" "${header#*=}" "$1" && return 1;;

    esac

  # Se o header key a ser buscado foi encontrado, um non-zero exit status é
  # retornado aqui com a finalidade de definir esta variável.
  done || local found=0

  # Remove esta função a fim evitar que ela seja acessível por fora.
  unset -f __print_header

  # Se o header key a ser buscado não foi passado, retorna 0. Se foi passado e
  # foi encontrado, retorna 0 (variável found definida como 0). Se foi passado
  # mas não foi encontrado, retorna 1 (variável found não definida).
  [ -z "$1" ] && return 0 || return ${found:-1}
}

# Retorna o valor do cookie passado. Se nehum cookie for passado, retorna todos
# no formato key=value, um em cada linha.
_get_cookies() {
  # $1: Nome do cookie a ser buscado (opcional).

  # Caso não encontrado, retorna exit status 1.
  [ -z "$HTTP_COOKIE" ] && return 1
}



# TODO: _get_body - Como pegar arquivo de upload ?
# TODO: Obter informações de rede da requisição

# Referência: https://www.tutorialspoint.com/http/http_requests.htm
